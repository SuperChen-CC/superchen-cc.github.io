<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2020/08/28/untitled/"/>
      <url>2020/08/28/untitled/</url>
      
        <content type="html"><![CDATA[<ul><li><input checked="" disabled="" type="checkbox"> test</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 Python 监控系统信息</title>
      <link href="2020/08/04/shi-yong-python-jian-kong-xi-tong-xin-xi/"/>
      <url>2020/08/04/shi-yong-python-jian-kong-xi-tong-xin-xi/</url>
      
        <content type="html"><![CDATA[<p>10分钟完成一个系统 CPU、RAM 占用监控程序。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><p>已经安装 Python (版本不限，已测试 2.7、3.6、3.7 可以正常使用)；</p></li><li><p>可以使用 pip install 安装依赖，测试方法：</p><pre class=" language-bash"><code class="language-bash">pip -V</code></pre><p>可以正常返回版本号即可。</p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="新建终端，安装-psutil"><a href="#新建终端，安装-psutil" class="headerlink" title="新建终端，安装 psutil"></a>新建终端，安装 psutil</h3><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> psutil</code></pre><h3 id="新建并编辑-sys-info-py"><a href="#新建并编辑-sys-info-py" class="headerlink" title="新建并编辑 sys_info.py"></a>新建并编辑 sys_info.py</h3><pre class=" language-bash"><code class="language-bash">vim sys_info.py</code></pre><p>将以下内容添加至新文件中</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> psutil<span class="token keyword">import</span> logging<span class="token keyword">import</span> time<span class="token keyword">import</span> argparseparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"Get system RAM &amp; CPU usage."</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--file'</span><span class="token punctuation">,</span> <span class="token string">'-f'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'Specify where to save log file. Default: /var/log/sys_info.log '</span><span class="token punctuation">,</span>                    default<span class="token operator">=</span><span class="token string">'/var/log/sys_info.log'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--show'</span><span class="token punctuation">,</span> <span class="token string">'-s'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'Will be printed on the console.'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>log_path <span class="token operator">=</span> args<span class="token punctuation">.</span>fileformatter <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s - %(message)s'</span><span class="token punctuation">)</span>logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>fh <span class="token operator">=</span> logging<span class="token punctuation">.</span>FileHandler<span class="token punctuation">(</span>log_path<span class="token punctuation">)</span>fh<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>fh<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>fh<span class="token punctuation">)</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>show<span class="token punctuation">:</span>    sh <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>sh<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Wait for psutil to refresh information</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># write log</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"RAM &amp;#123;0&amp;#125;% - CPU &amp;#123;1&amp;#125;%"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>psutil<span class="token punctuation">.</span>virtual_memory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>percent<span class="token punctuation">,</span> psutil<span class="token punctuation">.</span>cpu_percent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## Python 3.6 f-string</span><span class="token comment" spellcheck="true"># logger.info(f'RAM &amp;#123;psutil.virtual_memory().percent&amp;#125;% - CPU &amp;#123;psutil.cpu_percent()&amp;#125;%')</span></code></pre><h3 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h3><pre class=" language-bash"><code class="language-bash">python sys_info.py</code></pre><p>无报错代表运行成功，检查 log_paht 指定位置是否生成日志。</p><h3 id="编写-crontab-定时任务"><a href="#编写-crontab-定时任务" class="headerlink" title="编写 crontab 定时任务"></a>编写 crontab 定时任务</h3><p>编辑当前用户的定时任务</p><pre class=" language-bash"><code class="language-bash"><span class="token function">crontab</span> -e</code></pre><p>设置脚本每 30 分钟运行一次(使用 <code>i</code> 键进入编辑模式，编辑完成后敲击<code>esc</code>键，并输入 <code>:wq</code> 保存退出)</p><pre class=" language-bash"><code class="language-bash">*/30 * * * * python ~/sys_info.py</code></pre><h2 id="附录-crontab-语法"><a href="#附录-crontab-语法" class="headerlink" title="附录 crontab 语法"></a>附录 crontab 语法</h2><pre class=" language-crontab"><code class="language-crontab"># Example of job definition:# .---------------- minute (0 - 59)# |  .------------- hour (0 - 23)# |  |  .---------- day of month (1 - 31)# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# |  |  |  |  |# *  *  *  *  * user-name  command to be executed</code></pre><h2 id="pyinstaller-打包可执行程序"><a href="#pyinstaller-打包可执行程序" class="headerlink" title="pyinstaller 打包可执行程序"></a>pyinstaller 打包可执行程序</h2><p>可以使用 Pyinstall 打包可执行程序，方便安装在没有 Python 环境的系统中，但不同的平台需要单独打包(例如，如果想打包为 *.exe 的 Windwos 可执行程序，就需要现在 Windows 平台中运行 PyInstaller)。<a href="https://pyinstaller.readthedocs.io/en/stable/">官方文档</a></p><blockquote><p>参考资料：<br><a href="https://psutil.readthedocs.io/en/latest/">psutil documentation</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 运维 </tag>
            
            <tag> psutil </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop 实现倒排索引</title>
      <link href="2019/12/14/hadoop-shi-xian-dao-pai-suo-yin/"/>
      <url>2019/12/14/hadoop-shi-xian-dao-pai-suo-yin/</url>
      
        <content type="html"><![CDATA[<p>最近在给给女朋友做大数据选修课作业，顺便把之前学的东西往回捡一捡 2333。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9wcbauzlnj30sm0jwn1i.jpg" alt="作业要求"></p><h2 id="1-程序设计伪代码"><a href="#1-程序设计伪代码" class="headerlink" title="1. 程序设计伪代码"></a>1. 程序设计伪代码</h2><p>不太清楚为什么会要求作业报告中包含伪代码，可以跳过直接看第2、3部分～</p><ul><li><p>Mapper</p><p>将每一行的内容分词，输出 key 为“单词,文件名,单词总数”，输出 value 为“出现次数”</p><pre><code>// 获取文件名fileName = value.getFileName()// 从输入中获取所有单词words = value.itemfor(word : words)&#123;    // key = 单词，文件名，单词总数    key = word + &quot;,&quot; + fileName + &quot;,&quot; + words.length()    value = 1    context.write(key, value)&#125;</code></pre></li><li><p>Combiner</p><p>针对每一个输入 key，将 value 值累加，并将 key 中的文章放入 value，输出 key 为“单词”，输出 value 为“文件名,单词总数,出现次数 ….. ”</p><pre><code>// 先统计同一文件下相同单词的个数for(value: values)&#123;    sum += value&#125;// 从 key 中取出单词作为下一阶段的 key，把 value 设置为：文件名，单词总数，出现次数key = key.subString(0, key.indexOf(&quot;,&quot;))value = key.subString(key.indexOf(&quot;,&quot;) + &quot;,&quot; sum)context.write(key, value)</code></pre></li><li><p>Reducer</p><p>针对每一个输入 key，以冒号分割，将 value 值中的出现次数取出来累加，输出 key 为“单词”，输出<em>value</em>为“总出现次数:{(文件名，单词总数，出现次数)…}”</p><pre><code>for(value: values)&#123;    // 重设 value  data[3] = value.split(&quot;,&quot;)  fileList = &quot;(&quot; + data[0] + &quot;,&quot; + data[2] + &quot;,&quot; + data[1] + &quot;)&quot;  // 统计出现总次数  sum += data[2];&#125;//总出现次数:&#123;(文件名，单词总数，出现次数)...&#125;result = sum + &quot;:&#123;&quot; + fileList.toString() + &quot;&#125;&quot;;context.write(key, result)</code></pre></li></ul><h2 id="2-设计思路"><a href="#2-设计思路" class="headerlink" title="2. 设计思路"></a>2. 设计思路</h2><p>map 阶段主要是将文件中的单词根据哈希取出(参考 hadoop 官方提供的 wordcount 例子)</p><p>在 reduce 阶段，以单词作为 key ，分两步：</p><ol><li>第一步先计算出每个单词在每个文件中出现的次数</li><li>第二步计算出该单词在所有文件中出现的次数，并格式化输出内容</li></ol><p>难点：</p><p>由于 Map 阶段与 wordcount 例子不同，在该阶段计算出的 key 是“单词,文件名,单词总数”，因此在 reduce 阶段需要提取出我们最终的想要的单词作为 key。</p><p>再根据单词作为 key 进行混洗，并对 value 进行格式化最终输出。</p><p>另外，最终输出时需要自定义 map 输出的分隔符</p><p>示意图如下：</p><pre class="mermaid">graph TDfile1[文件1]file2[文件2]file3[文件3]file4[文件4]map(Map阶段 => key=单词,文件名,单词总数,value=1)combine(Reduce阶段1 => key=单词, value=文件名,单词总数,出现次数)reduce(最终结果)file1 --> |提取|mapfile2 --> |提取|mapfile3 --> |提取|mapfile4 --> |提取|mapmap --> |重设 Key, 计算文件内出现次数|combinecombine --> |计算总出现次数,格式化输出|reduce</pre><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h2><h3 id="3-1-环境说明"><a href="#3-1-环境说明" class="headerlink" title="3.1 环境说明"></a>3.1 环境说明</h3><ul><li>Hadoop ：2.7.7</li><li>Java : 1.8</li></ul><p>在数据量不大的情况下，使用单机模式即可，maven 项目的 pom.xml 文件配置如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.myhadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-源代码"><a href="#3-2-源代码" class="headerlink" title="3.2 源代码"></a>3.2 源代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringTokenizer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Job<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Reducer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>FileInputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>FileSplit<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span>FileOutputFormat<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCount</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">myMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Text<span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> Text one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> Text word <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> Text value<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            FileSplit fileSplit <span class="token operator">=</span> <span class="token punctuation">(</span>FileSplit<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getInputSplit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            StringTokenizer itr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String len <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>itr<span class="token punctuation">.</span><span class="token function">countTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>itr<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 文件名</span>                String fileName <span class="token operator">=</span> fileSplit<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 单词，文件名，总单词数</span>                word<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>itr<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                one<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> one<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">myCombiner</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span>Text<span class="token punctuation">,</span>Text<span class="token punctuation">,</span>Text<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Text info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>Text key<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>Text<span class="token operator">></span> values<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Text value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sum <span class="token operator">+=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> splitIndex <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>splitIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//取出单词作为 key</span>            key<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> splitIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">myReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Text<span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> Text result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>Text key<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>Text<span class="token operator">></span> values<span class="token punctuation">,</span>Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            StringBuilder fileList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Text value <span class="token operator">:</span> values<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                data <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//格式化输出：(文件名，出现次数, 单词总数)</span>                fileList<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 统计出现总次数</span>                sum <span class="token operator">+=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//总出现次数:&amp;#123;(文件名，单词总数，出现次数)...&amp;#125;</span>            result<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sum <span class="token operator">+</span> <span class="token string">":&amp;#123;"</span> <span class="token operator">+</span> fileList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Configuration conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置分隔符</span>        conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"mapred.textoutputformat.separator"</span><span class="token punctuation">,</span> <span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Job job <span class="token operator">=</span> Job<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> <span class="token string">"word count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span>WordCount<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span>myMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setCombinerClass</span><span class="token punctuation">(</span>myCombiner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span>myReducer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputFormat<span class="token punctuation">.</span><span class="token function">addInputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputFormat<span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="3-3-输出结果"><a href="#3-3-输出结果" class="headerlink" title="3.3 输出结果"></a>3.3 输出结果</h3><pre><code>bear-&gt;1:&#123;(d2.txt,1,5)&#125;cat-&gt;6:&#123;(d2.txt,3,5)(d1.txt,2,4)(d4.txt,1,5)&#125;dog-&gt;2:&#123;(d1.txt,1,4)(d3.txt,1,3)&#125;fox-&gt;3:&#123;(d3.txt,1,3)(d2.txt,1,5)(d1.txt,1,4)&#125;hen-&gt;1:&#123;(d4.txt,1,5)&#125;rabbit-&gt;1:&#123;(d4.txt,1,5)&#125;sheep-&gt;1:&#123;(d4.txt,1,5)&#125;wolf-&gt;2:&#123;(d4.txt,1,5)(d3.txt,1,3)&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 倒排索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敏捷开发模型中关于Git的思考</title>
      <link href="2019/08/03/min-jie-kai-fa-mo-xing-zhong-guan-yu-git-de-si-kao/"/>
      <url>2019/08/03/min-jie-kai-fa-mo-xing-zhong-guan-yu-git-de-si-kao/</url>
      
        <content type="html"><![CDATA[<p>一个成功的 DevOps 实践，需要以一个成熟优秀的 “版本管理” 为核心的 。当下最流行的版本控制平台非 <a href="https://git-scm.com/">Git</a> 莫属！这篇文章将以它为例，介绍在 DevOps 中如何进行版本管理，并使项目易于维护。</p><p>Git 之所以如此流行，以我片面的认识是由于 Git 相较于传统的版本控制平台，它的分支操作不会生成代码的物理拷贝，而是以指针的形式指向当前版本（又称为“快照”），因此十分便捷、易于使用。然而，使用方便的副作用则是如果管理不佳，将会创造出一个枝节四处开放的项目，难以协调和维护。</p><p>一个比较合理，并适应敏捷开发模型的分支管理策略是 <a href="http://nvie.com/">Vincent Driessen</a> 提出的 <a href="https://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a> （以下简称 “该策略”），我从中收获很多。它可以使得版本库的演进保持简洁，主干清晰，各个分支各司其职、井井有条。理论上，该策略对所有的版本管理系统都适用。当然这篇文章的主角是 Git ，我将会以 Git 举例来实现这个模型。</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g52p0jiwsej30u013rgs7.jpg" alt="git 分支模型"></p><p>（图片来源：<a href="https://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a> ）</p><p>如上图所示，该策略主要包含三类分支：主分支（master）、开发分支（develop）和 辅助性分支（feature、release、hotfix）。</p><h2 id="1-主分支-Master"><a href="#1-主分支-Master" class="headerlink" title="1. 主分支 Master"></a>1. 主分支 Master</h2><p> 版本库需要有且仅有一个主分支，这个分支通常是 master 。master 分支会在版本库初始化之后自动创建，所有提供给用户的正式版本，都应该是在该分支上。如下图：</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g52s67cujgj306s0k4t9n.jpg" alt="master 分支"></p><p>这里的每一个节点对应一次提交操作，命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token operator">&lt;</span>some file<span class="token operator">></span><span class="token function">git</span> commit -m <span class="token string">"some commit message"</span><span class="token function">git</span> push</code></pre><p>假设我们正在开发一个 Web 应用，我们通过 CI/CD 工具去监听我们的版本库，如果开发人员提交了代码，将会自动触发构建，并将自动将代码发布到预先配置好的环境中去运行，这样用户就可以直接访问到我们的 Web 页面。</p><p>现在新手程序员小陈，通过上述的命令向版本库提交了新的代码，此时我们的版本库中只有一个 master 分支，提交的代码可能只是在小陈的环境中测试通过了，甚至小陈可能没有测试直接进行了提交。由于没有进行完整的测试，小陈提交的代码有可能导致我们的 Web 应用被恶意利用，甚至无法访问。</p><p>因此，我们需要另外的一个分支，用于日常开发。</p><h2 id="2-开发分支-develop"><a href="#2-开发分支-develop" class="headerlink" title="2. 开发分支 develop"></a>2. 开发分支 develop</h2><p>我们把 master 分支用来发布重大版本，日常开发应该在另一条分支上完成。通常我们把开发用的分支叫做 develop。如下图所示：</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g52shmjeadj30q6192gq3.jpg" alt="develop 分支"></p><p>这里我们需要一些额外的操作来创建一个新的分支：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b develop master</code></pre><p>有了 develop 分支之后，我们就可以在 CI/CD 平台中新建一个任务流去监听它，并将它发布到测试环境，进行功能测试和安全测试。至此，程序员小陈就可以放心地提交代码，而不用担心影响用户体验了！</p><p>在测试环境完成功能测试和安全测试通过之后，我们就可以考虑将 develop 分支合并（merge）到 master 分支上：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 首先我们需要先切换到 master 分支</span><span class="token function">git</span> checkout master<span class="token comment" spellcheck="true"># 将改动合并到当前分支 （即，将 develop 分支合并到 master 分支）</span><span class="token function">git</span> merge --no-ff develop</code></pre><p>这里稍微解释一下 <code>--no—ff</code> 参数的作用（ff =&gt; fast forward）。我们之前提到过，Git 的合并操作实际上是用类似指针的方式，将指针指向了当前的快照。而默认情况下，如果我们直接使用不带参数的 <code>merge</code>  去合并 develop 分支，将会执行 “快进式合并” 把 master 分支的指针直接指向 develop 分支，如下图：</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g52uh5jme0j30m80jo74q.jpg" alt="快进式合并"></p><p>这和我们预想的不同。使用 <code>--no--ff</code> 参数，可以使 master 分支中新增一个节点，并合并 develop 中的改动，就如同我们一开始所想的那样，两条分支并行前进。</p><h2 id="3-辅助性分支"><a href="#3-辅助性分支" class="headerlink" title="3. 辅助性分支"></a>3. 辅助性分支</h2><p>其实在大多数小规模项目的开发中，使用上述的两个分支已经足够了，一条用于发布，一条用与日常开发。</p><p>但是针对规模较大，或者有特殊要求的项目，我们需要一些辅助性分支来保证我们主干分支的健壮性。</p><p>辅助性分支主要有以下三类：</p><ul><li>功能分支（feature）</li><li>（预）发布分支（release）</li><li>热修复分支（hotfix）</li></ul><p>这些分支是为了某些需求而临时生成的，使用完之后就应该删除，因此辅助性分支也被称为临时性分支。代码库常设的分支应该是开发分支和主分支。</p><h3 id="3-1-功能分支"><a href="#3-1-功能分支" class="headerlink" title="3.1 功能分支"></a>3.1 功能分支</h3><p>功能分支是为了开发特定功能而从 develop 分支上新建的，待开发完成后再合并会 develop 分支。</p><p>例如，最近我们的 Web 应用需要添加支付模块，项目技术负责人认为小陈最近状态不错，便将这个任务分配给了小陈。小陈需要带领一个小团队来攻克这个问题，他先从 develop 分支新建了一个名为 “feature-PayModule” 的分支：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b feature-PayModule develop </code></pre><p>经过他们的努力，终于完成了该功能，他们需要把这个模块合并回 develop 让 CI/CD 平台自动将改动发布到测试环境进行测试：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 切换分支</span><span class="token function">git</span> checkout develop<span class="token comment" spellcheck="true"># 合并分支</span><span class="token function">git</span> merge --no-ff feature-PayModule<span class="token comment" spellcheck="true"># 删除 feature 分支</span><span class="token function">git</span> branch -d feature-PayModule<span class="token comment" spellcheck="true"># 提交代码</span><span class="token function">git</span> push origin develop</code></pre><h3 id="3-2-发布分支"><a href="#3-2-发布分支" class="headerlink" title="3.2 发布分支"></a>3.2 发布分支</h3><p>发布分支也叫作预发布分支（pre-release），通常它是在版本正式发布前的一个预发布测试版，它允许我们在正式上线前可以做一定的修改。</p><p>预发布分支是从 develop 分支上分出，最终将会合并到 develop 和 master 分支上。市面上大多数软件都有一个夜间预览版（nightly），基本上都是通过 release 版本发布的。</p><p>从 develop 分支创建 release 分支的要求是所有计划发布的 feature 已经合并到了 develop 分支上，而不计划发布的分支需要等到创建 release 分支之后才能合并到 develop 分支。创建 release 分支的时候需要为 release 分支设定一个版本号，因为将 release 分支将会合并到 master，而 master 分支的每一次 commit 就相当于一个版本的发布，所以将带版本号 release 分支合并到 master 将会使版本更迭更加清晰。</p><p>现在，假设我们的 Web 应用现在希望新增 Preview Version，具有内测资格的特殊用户群体会帮助我们测试即将发布的新功能。小陈需要这样做：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建一个 release 分支</span><span class="token function">git</span> checkout -b release-0.4 develop<span class="token comment" spellcheck="true"># 经过内测用户测试，并修改问题后，合并到 master 分支</span><span class="token function">git</span> checkout master<span class="token function">git</span> merge --no-ff release-0.4<span class="token comment" spellcheck="true"># 对合并生成的新节点，做一个标签</span><span class="token function">git</span> tag -a v0.4<span class="token comment" spellcheck="true"># 再合并到 develop 分支</span><span class="token function">git</span> checkout develop<span class="token function">git</span> merge --no-ff release-0.4<span class="token comment" spellcheck="true"># 最后删除 release 分支</span><span class="token function">git</span> branch -d release-0.4</code></pre><h3 id="3-3-热修复分支"><a href="#3-3-热修复分支" class="headerlink" title="3.3 热修复分支"></a>3.3 热修复分支</h3><p>软件正式发布后，难免会出现一些Bug，比如可能被恶意利用的漏洞，或者老旧设备、系统等适配出现问题。这就需要我们临时创建一个分支，来进行 Bug 修复。这个分支就被称为 hotfix 分支。</p><p>hotfix 分支是从 master 分支上分出来的，最后将会合并到 master 分支和 develop 分支。</p><p>例如，在我们发布 v4.0 版本之后，有用户通过页面上的 FeedBack 反馈在 IE 7 上的样式布局变得很奇怪，并难以使用。项目经理收到这个反馈后，任命小陈去针对 IE 7 做一个版本适配，而其他研发人员继续完成 develop 分支上的开发。</p><p>小陈接到该任务后，使用如下方式进行 hotfix 分支上的开发：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建一个 hotfix 分支</span><span class="token function">git</span> checkout -b hotfix-0.4.1 master<span class="token comment" spellcheck="true"># 修复结束后，合并到 master 分支</span><span class="token function">git</span> checkout master<span class="token function">git</span> merge --no-ff hotfix-0.4.1<span class="token function">git</span> tag -a v0.4.1<span class="token comment" spellcheck="true"># 再合并到 develop 分支</span><span class="token function">git</span> checkout develop<span class="token function">git</span> merge --no-ff hotfix-0.4.1<span class="token comment" spellcheck="true"># 最后删除 hotfix 分支</span><span class="token function">git</span> branch -d hotfix-0.4.1</code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>使用该模型可以大大增加开发的效率，并且让每一次 commit、merge 的目的变得更明确。我们可以通过一些工具、平台的辅助来更好地完成这些工作。下面我推荐几款效率工具：</p><table><thead><tr><th align="center">工具作用</th><th align="center">工具名称</th><th align="center">推荐原因</th></tr></thead><tbody><tr><td align="center">代码版本控制平台</td><td align="center"><a href="https://about.gitlab.com/">Gitlab</a></td><td align="center">开源、支持本地私有化部署、丰富的插件库支持</td></tr><tr><td align="center">持续集成平台</td><td align="center"><a href="%5Bhttps://jenkins.io%5D(https://jenkins.io/)">Jenkins</a></td><td align="center">开源、多种部署方式，中文支持，插件丰富</td></tr><tr><td align="center">问题追踪平台</td><td align="center"><a href="https://www.atlassian.com/software/jira">JIRA</a></td><td align="center">基于 Issue 驱动的项目管理非常适合敏捷，安全性、扩展性强</td></tr><tr><td align="center">白盒代码审计平台</td><td align="center"><a href="https://www.checkmarx.com/products/static-application-security-testing/">CxSAST</a> + <a href="https://www.sonarqube.org/">SonarQube</a></td><td align="center">两款工具语言支持丰富，集成性能优秀，并能与上述平台无缝集成</td></tr><tr><td align="center">灰盒代码审计平台</td><td align="center"><a href="https://www.checkmarx.com/products/iast-interactive-application-security-testing/">CxIAST</a></td><td align="center">不会延长 DevOps 时间，可以与 CxSAST 结果交叉验证结果汇总，并且能与上述平台良好集成。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
